name: Update Version

on:
  push:
    branches:
      - master

env:
  CURRENT_BRANCH: ${{ github.ref }}
  MY_BRANCH: ${{ github.head_ref }}


jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
     actions: write
     contents: write
     pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Get the latest tag
        id: get_latest_tag
        run: |
          LATEST_VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | sed 's/-.*$//' | sed 's/v//')
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
          echo $LATEST_VERSION
      - name: Read current version from package.json
        id: read_version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo $CURRENT_VERSION
        working-directory: ${{ github.workspace }}/application

      - name: Check if version needs update
        id: check_update
        run: |
          if [ "$LATEST_VERSION" == "$CURRENT_VERSION" ]; then
            echo "Version is up to date"
            echo "needs_update=false" >> $GITHUB_ENV
          else
            echo "Updating version to $LATEST_VERSION"
            echo "needs_update=true" >> $GITHUB_ENV
          fi  
      - name: Create temporary branch
        if: env.needs_update == 'true'
        run: |
          CURRENT_BRANCH_NAME=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "CURRENT_BRANCH_NAME=$CURRENT_BRANCH_NAME" >> $GITHUB_ENV
          echo "Current branch name/tag: $CURRENT_BRANCH_NAME"
          
          git branch
          git checkout -b release/$CURRENT_BRANCH_NAME
          git branch
      # - name: Checkout to temporary branch
      #   if: env.needs_update == 'true'
      #   run: |
      #     git checkout -b {{ steps.create-temporary-branch.outputs.current-branch-name }}
      #     git branch
          

      - name: Update package.json version
        if: env.needs_update == 'true'
        run: |
          npm version $LATEST_VERSION
        working-directory: ${{ github.workspace }}/application

      - name: Commit and push changes
        if: env.needs_update == 'true'
        run: |
          git config --global user.name 'bq-satyam-08'
          git config --global user.email 'satyam.nalawade@betaque.com'
          git add package.json
          git commit -m "bump version to $LATEST_VERSION"
          git branch
          if [ $(git ls-remote --heads origin release/$CURRENT_BRANCH_NAME | wc -l) -eq 1 ]; then
            echo "Branch already exists. Skipping push."
          else
            git push --set-upstream origin release/$CURRENT_BRANCH_NAME
          fi
          
          # git push --set-upstream origin release/$CURRENT_BRANCH_NAME
          echo $CURRENT_BRANCH_NAME
          echo "CURRENT_BRANCH_NAME=release/$CURRENT_BRANCH_NAME" >> $GITHUB_ENV
          echo "Current Branch: $CURRENT_BRANCH_NAME"
          echo "My Branch: $MY_BRANCH"
          
        working-directory: ${{ github.workspace }}/application

      # - name: Create Pull Request
      #   if: env.needs_update == 'true'
      #   uses: peter-evans/create-pull-request@v6
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: main
      #     delete-branch: false
      #     title: 'Update version to latest tag'
      #     body: 'This PR updates the version in package.json to the latest tag.'
      #     labels: 'automated PR'

      - name: Create Pull Request
        id: cpr-check
        run: |
          PR_EXISTS=$(gh pr list --state open --head $CURRENT_BRANCH_NAME --json id --limit 1 | jq '.[] | .id' | tr -d '"')
          if [ -n "$PR_EXISTS" ]; then
            echo "PR already exists with the same branch. Skipping creation."
          else
            echo "No PR exists with the same branch. Creating a new one."
            gh pr create --title "Bump version to $LATEST_VERSION" --body "Updating the release version to $LATEST_VERSION" --base main --head $CURRENT_BRANCH_NAME
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PR_GITHUB_TOKEN }}